#!/usr/bin/env perl

use strict;
use warnings;

my $use_utf8 = '';
my $use_test_exception = '';

################################################################################

sub get_argument {
    my ($str, $arg_num) = @_;

    $str =~ /\( (.*?) , \s (.*)/x;
    my $arg_1 = $1;
    my $arg_2 = $2;

    if ($str =~ /\(hasattr/) {
        $str =~ /\( (.*?) \) , \s (.*)/x;
        $arg_1 = $1 . ")";
        $arg_2 = $2;
    }    
    $arg_2 =~ s/\);$//;

    if ($arg_num == 1) {
        return $arg_1;
    } else {
        return $arg_2;
    }
}

sub set_argument {
    my ($str, $arg, $arg_num) = @_;

    if ($str =~ /\(hasattr/) {
        if ($arg_num == 1) {
            $str =~ s/\(hasattr\((.*?)\),\s(.*?)\)/($arg, $2)/;
        } else {
            $str =~ s/\(hasattr\((.*?)\),\s(.*?)\)/(hasattr($1), $arg)/;
        }
    } else {
        if ($arg_num == 1) {
            $str =~ s/\((.*?),\s(.*?)\)/($arg, $2)/;
        } else {
            $str =~ s/\((.*?),\s(.*?)\)/($1, $arg)/;
        }
    }

    return $str;
}

sub check_is_multiline {
    my ($str) = @_;

    if ($str !~ /\);/) {
        return 1;
    }

    return 0;
}

sub check_is_method_call {
    my ($str) = @_;

    if ($str =~ /^len\(/ 
        || $str =~ /^hasattr\(/) {
        return 1;
    }

    return 0;
}

sub multiline_to_single_line {
    my ($fd, $str) = @_;

    $str =~ s/;$//;
    while (<$fd>) {
        chomp;
        $_ =~ s/^\s*//;

        if ($_ !~ /\)$/) {
            $str .= $_;
        } else {
            $str .= "$_;";
            last;
        }
    }

    return $str;
}

sub replace_object_assignment {
    my ($str) = @_;

    # First try
    $str =~ s/
        \s* (.*?) \s* = \s* (.*) \.from_file (.*)
    /    my \$$1 = $2->from_file$3;/x;

    # Second try
    $str =~ s/
    \s* with \s (.*?) \.from_file \('(.*?)'\) \s as \s (.*?) :
    /    my \$$3 = $1->from_file('$2');/x;

    return $str;
}

sub replace_method_call {
    my ($str) = @_;

    if ($str =~ /^hasattr\(/) {
        $str =~ /^hasattr \( (.*?) , \s \'(.*?)\' \)/x;

        my $object = "$1.$2";
        $object = replace_object_syntax($object);

        $str = "defined($object)";
    } elsif ($str =~ /^len\(/) {
        $str =~ /^len \( (.*?) \)/x;

        my $object = $1;
        $object = replace_object_syntax($object);
        
        $str = 'scalar(@{' . $object . '})';
    }

    return $str;
}

sub replace_object_syntax {
    my ($str) = @_;

    $str =~ s/\./()->/g;
    $str =~ s/\(\)//;
    $str .= '()';
    $str = '$' . $str;

    return $str;
}

sub replace_assert_equal_with_is {
    my ($str) = @_;

    $str =~ s/\s* self\.assertEqual\(
        /    is\(/gx;

    return $str;
}

sub replace_assert_raises_with_dies_ok {
    my ($str) = @_;

    $str =~ s/
        \s* with \s (.*?) \.from_file \('(.*?)'\) .*
    /    dies_ok { $1->from_file('$2') } 'Died';/x;

    return $str;
}

sub replace_variable_assignment {
    my ($str) = @_;

    my $is_replaced = 0;
    if ($str !~ /\s*my\s\$/) {
        $str =~ s/
            \s* (.*?) \s = \s (.*)
        /    my \$$1 = $2;/x;
        $is_replaced = 1;
    }

    return ($str, $is_replaced);
}

sub replace_true_false {
    my ($str) = @_;

    $str =~ s/True/1/;
    $str =~ s/False/''/;

    return $str;
}

sub replace_enums {
    my ($str) = @_;

    if ($str =~ /(.*?)enum/i) {
        $str =~ s/(.*?)\.(.*)/$1::$2/x;

        $str =~ /(.*?)::(.*)/;
        my $enum_name = uc($2);
        $enum_name =~ s/\./_/g;
        
        $str =~ s/(.*?)::(.*)/\$$1::$enum_name/x;
    }

    return $str;
}

sub replace_array_element_references {
    my ($str) = @_;

    if ($str =~ /\[(\d+)\]\(\)/) {
        $str =~ s/
            \[ (\d+) \] \(\)
        /()->[$1]/gx;
    }

    return $str;
}

sub replace_arrays {
    my ($str) = @_;

    my $is_replaced = 0;
    if ($str =~ /\[(.*?)\]/) {
        if ($str =~ /\[\]/) {
            $str =~ s/\[\]/undef/;
        }
        $is_replaced = 1;
    }

    return ($str, $is_replaced);
}

sub replace_unicode_strings {
    my ($str) = @_;

    if ($str =~ /u\'/) {
        $str =~ s/u\'/\'/g;
        $use_utf8 = "use utf8;\n";
    }

    return $str;
}

sub replace_binary_strings {
    my ($str) = @_;

    # Replace binary strings
    if ($str =~ /b\'/) {
        $str =~ s/b\'(.*?)\'/"$1"/g;
    }

    return $str;
}

sub replace_bytearray_with_pack {
    my ($str) = @_;

    if ($str =~ /bytearray\(\[(.*?)\]\)/) {
        my $bytes = $1;
        
        $bytes =~ s/\(\)//g;
        $str =~ s/bytearray.*$//g;
        $str .= "pack('C*', ($bytes)";
    }

    return $str;
}

################################################################################

my $s = '';
$s .= $_ while <>;
chomp $s;

my $fd;
open $fd, '+<', \$s
    or die "Cannot open input as file: $!";

$s =~ /from (.*?) import (.*)/;
my ($src_name, $class_name) = ($1, $2);
die 'Unable to detect source name' unless $src_name;
die 'Unable to detect class name' unless $class_name;

#$s =~ s/^#.*//;     # Remove comments (+ '# coding: utf8')
$s =~ s/;//g;       # Remove semicolons
$s =~ s/\"/'/g;     # Replace " with '

$s =~ s/import unittest\n\n//;
$s =~ s/from $src_name import $class_name\n\n//;
$s =~ s/class(.*):\n//;
$s =~ s/\s*def(.*):\n//;

$s = replace_object_assignment($s);

my $s_new = '';
my $number_of_tests = 0;
my $done = 0;
while (<$fd>) {
    chomp;

    if ($_ =~ /\s*#.*/) {
        # Preserve comment
        $_ =~ s/^\s{4}//;
    } elsif ($_ =~ /(.*?)\s=\s(.*?)/) {
        my $is_replaced;
        ($_, $is_replaced) = replace_variable_assignment($_);
        if ($is_replaced) {
            $_ =~ /=\s(.*);/;
            my $value = $1;
            
            $value = replace_object_syntax($value);
            $value = replace_array_element_references($value);

            $_ =~ s/=\s(.*);/= $value;/;
        }
    } elsif ($_ =~ /self\.assertEqual/) {
        $number_of_tests++;

        $_ =~ s/self\.assertEquals/self.assertEqual/;
        $_ .= ';';

        $_ = replace_assert_equal_with_is($_);

        if (check_is_multiline($_)) {
            $_ = multiline_to_single_line($fd, $_);
        }

        # Parse the first arg
        my $arg_1 = get_argument($_, 1);
        if (check_is_method_call($arg_1)) {
            $arg_1 = replace_method_call($arg_1);
        } else {
            $arg_1 = replace_object_syntax($arg_1);
        }
        $arg_1 = replace_array_element_references($arg_1);
        $_ = set_argument($_, $arg_1, 1);

        # Parse the second arg
        my $arg_2 = get_argument($_, 2);
        $arg_2 = replace_true_false($arg_2);
        $arg_2 = replace_enums($arg_2);
        my $is_replaced;
        ($arg_2, $is_replaced) = replace_arrays($arg_2);
        if ($is_replaced) {
            $_ =~ s/is\(/is_deeply(/;
        }
        $arg_2 = replace_unicode_strings($arg_2);
        $arg_2 = replace_binary_strings($arg_2);
        $arg_2 = replace_bytearray_with_pack($arg_2);
        $_ = set_argument($_, $arg_2, 2);

        # Add the last arg
        $_ =~ s/\);/, 'Equals');/gx;
    } elsif ($_ =~ /self\.assertRaises/) {
        $number_of_tests++;

        my $line_1 = $_;
        my $line_2 = <$fd>;
        chomp $line_2;

        $_ = replace_assert_raises_with_dies_ok($line_2);

        $use_test_exception = "use Test::Exception;\n";
        $done = 1;
    }

    $s_new .= $_ . "\n";

    if ($done) {
        last;
    }
}
chomp $s_new;
$s = $s_new;
close $fd;

print <<"END";
package spec::perl::Test$class_name;

use strict;
use warnings;
use base qw(Test::Class);
use Test::More;
use $class_name;
$use_test_exception$use_utf8
sub test_$src_name: Test($number_of_tests) {
$s
}

Test::Class->runtests;
END
