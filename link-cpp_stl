#!/usr/bin/env ruby

puts "link-cpp_stl: started"

require 'find'
require 'set'
require 'open3'

require 'pp'

class LinkRunner
  def initialize(obj_dir, test_out_dir)
    @obj_dir = obj_dir
    @test_out_dir = test_out_dir

    # Initialize
    @objs = Dir.glob("#{@obj_dir}/**/*.o").reject { |x| x =~ /CompilerIdCXX/ }
    @link_tmpl = File.read('CMakeFiles/ks_tests.dir/link.txt').gsub(/CMakeFiles\/.*\.o /, '@@@')
    puts "Link command template: #{@link_tmpl.inspect}"

    @iteration = 1

    puts "... initialized"
  end

  def run
    loop {
      r = run_iteration
      case r
      when :retry
        puts "Retrying..."
      when :fail
        puts "Unable to recover more, bailing out."
        return false
      when :success
        puts "Success."
        return true
      else
        raise "Unexpected return status: #{r.inspect}"
      end
      @iteration += 1
    }
  end

  def run_iteration
    puts "Linking attempt #{@iteration}..."

    link_cmd = @link_tmpl.gsub(/@@@/, @objs.join(' '))

    stdout, stderr, status = Open3.capture3(link_cmd)
    puts "(stdout.size=#{stdout.size}, stderr.size=#{stderr.size}, status=#{status.inspect})"
    File.write("#{@test_out_dir}/link.stdout.#{@iteration}", stdout)
    File.write("#{@test_out_dir}/link.stderr.#{@iteration}", stderr)

    if status.exitstatus != 0
      puts "Failed with exitstatus=#{status.exitstatus}, trying to remove offending files..."
      obj_files_to_remove = parse_linker(stderr)
      pp obj_files_to_remove
      if obj_files_to_remove.empty?
        return :fail
      else
        remove_files(obj_files_to_remove)
        return :retry
      end
    else
      return :success
    end
  end

  def parse_linker(stderr)
    r = []

    # Modern g++ messages
    stderr.gsub(/^.*\/ld: (.*?\.o): .*/) {
      r << $1
    }

    # Older g++/ld messages
    stderr.gsub(/^([^: ]*?\.o): .*/) {
      r << $1
    }

    # OS X clang++/ld messages
    stderr.gsub(/^      (.*?) in (.*?)$/) {
      r << $2
    }

    r
  end

  def remove_files(files)
    Set.new(files).each { |fn|
      if @objs.delete(fn).nil?
        if (@objs.reject! { |x| x.end_with?(fn) }).nil?
          pp @objs
          raise "Unable to remove #{fn} from obj files"
        end
      end
    }
    return true
  end
end

r = LinkRunner.new(*ARGV).run

puts "Result: #{r}"
return r ? 1 : 0
