#!/usr/bin/env ruby

def do_expression(e)
  e = e.gsub(/^r->/, '')
  e = e.gsub(/\(\)/, '')
  e = e.gsub(/->at\((.*?)\)/, "[\\1]")
  e = e.gsub('->', '.')

  e = e.gsub(/std::string\(\"(.*?)\", (\d+)\)/) {
    bytes = $1
    len = $2

    bytes = bytes.split("\\x")[1..-1].map { |x| "0x#{x}" }.join(', ')

    "[#{bytes}]"
  }

  e
end

def convert(input, out)
  id = nil
  data = nil

  mode = 1

  input.each_line { |line|
    case mode
    when 1
      case line
      when /BOOST_AUTO_TEST_CASE\(test_(.*?)\)/
        id = $1
      when /std::ifstream ifs\("src\/(.*?)"/
        data = $1

        out.puts "id: #{id}"
        out.puts "data: #{data}"
        out.puts "asserts:"

        mode = 2
      end
    when 2
      case line.strip
      when ''
        out.puts
      when 'delete r;', '}', 'kaitai::kstream ks(&ifs);'
        # do nothing
      when /BOOST_CHECK_EQUAL\((.*?), (.*?)\);$/
        actual = $1
        expected = $2

        actual = do_expression(actual)
        expected = do_expression(expected)

        out.puts "  - actual: #{actual}"
        out.puts "    expected: #{expected}"
      else
        out.puts "# #{line}"
      end
    end
  }
end

def convert_all
  Dir.glob('spec/cpp_stl/test_*.cpp').each { |fn|
    test_name = File.basename(fn).gsub(/^test_/, '').gsub(/\.cpp$/, '')

    print "#{test_name} - "

    File.open(fn, 'r') { |input|
      first = input.gets
      if first =~ /^\/\/ Autogenerated from KST: /
        puts "already KST"
        next
      end
      File.open("spec/kst_auto/#{test_name}.kst", 'w') { |output|
        convert(input, output)
      }
      puts "OK"
    }
  }
end

convert_all
