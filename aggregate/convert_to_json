#!/usr/bin/env ruby

# Convert tests result from many different languages from test
# framework's native format to our unified JSON.
#
# Usage: convert_to_json {lang} {infile} {outfile}

require 'time'

require_relative 'junit_xml_parser'
require_relative 'rspec_json_parser'
require_relative 'boost_test_parser'
require_relative 'nunit_xml_parser'
require_relative 'build_fail_parser'
require_relative 'valgrind_xml_parser'
require_relative 'make_fail_parser'

raise 'Needs exactly 3 arguments' unless ARGV.size == 3

def add_fails(first, *seconds)
  seconds.each { |second|
    second.each_pair { |k, v|
      old_status = (first[k] || {})['status']
      new_status = v['status']

      first[k] = v if (
          ((old_status.nil? or old_status == 'passed') and (new_status != 'passed')) or
          (old_status == 'spec_build_failed' and new_status == 'format_build_failed')
        )
    }
  }
  first
end

lang, infile, outfile = ARGV

result = case lang
when 'cpp_stl'
  add_fails(
    BoostTestParser.new("#{infile}/results.xml").to_h,
    MakeFailParser.new("#{infile}/make.stderr").to_h,
    ValgrindXMLParser.new("#{infile}/valgrind.xml").to_h
  )
when 'go', 'java', 'javascript', 'lua', 'perl', 'php', 'python', 'rust'
  JUnitXMLParser.new(infile).to_h
when 'ruby'
  RSpecJSONParser.new(infile).to_h
when 'csharp'
  NUnitXMLParser.new(infile).to_h
else
  raise "Unable to handle language #{lang.inspect}"
end

meta = {
  'lang' => lang,
  'timestamp' => Time.now.utc.iso8601,
}

if ENV['TRAVIS_BUILD_ID']
  meta['ci'] = {
    'ci' => 'travis',
    'build_id' => ENV['TRAVIS_BUILD_ID'],
    'job_id' => ENV['TRAVIS_JOB_ID'],
    'job_number' => ENV['TRAVIS_JOB_NUMBER'],
    'url' => ENV['TRAVIS_JOB_WEB_URL'],
  }
end

if ENV['APPVEYOR']
  account = ENV['APPVEYOR_ACCOUNT_NAME']
  project = ENV['APPVEYOR_PROJECT_SLUG']
  build_id = ENV['APPVEYOR_BUILD_ID']
  job_id = ENV['APPVEYOR_JOB_ID']
  url = "https://ci.appveyor.com/project/#{account}/#{project}/builds/#{build_id}/job/#{job_id}"

  meta['ci'] = {
    'ci' => 'appveyor',
    'build_id' => build_id,
    'job_id' => job_id,
    'job_number' => ENV['APPVEYOR_JOB_NUMBER'],
    'url' => url,
  }
end

result['$meta'] = meta
json = JSON.pretty_generate(result)

File.write(outfile, json)
