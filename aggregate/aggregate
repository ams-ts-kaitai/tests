#!/usr/bin/env ruby

require 'set'
require 'erb'
require 'cgi'

require_relative 'test_result'
require_relative 'translator_xml_parser'
require_relative 'junit_xml_parser'
require_relative 'rspec_json_parser'
require_relative 'boost_test_parser'
require_relative 'nunit_xml_parser'
require_relative 'build_fail_parser'

class Aggregator
  attr_reader :name
  attr_reader :aggr

  def initialize(name)
    @name = name
    @aggr = {}
    @count_ok = nil
  end

  def add_translators(parser)
    parser.each_test { |lang, t|
      h = (@aggr[t.name] ||= {})
      raise "Duplicate test name \"#{t.name}\" for #{lang}" if h[lang]
      h[lang] = t
    }
  end

  def sum_test(t1, t2)
    return t2 if t1.nil?

    raise "adding tests with non-matching names #{t1.name.inspect} and #{t2.name.inspect}" unless t1.name == t2.name

    name = t1.name
    status = (t1.status == :passed and t2.status == :passed) ? :passed : :failed
    elapsed = t1.elapsed + t2.elapsed
    failure = t1.failure or t2.failure

    TestResult.new(name, status, elapsed, failure)
  end

  def add(lang, parser)
    parser.each_test { |t|
      h = (@aggr[t.name] ||= {})
      if lang == 'perl'
        # allow duplicate test names for Perl, it generates "testcase"
        # for every assertion; sum it up
        h[lang] = sum_test(h[lang], t)
      else
        raise "Duplicate test name \"#{t.name}\" for #{lang}" if h[lang]
        h[lang] = t
      end
    }
  end

  def add_fails(lang, parser)
    parser.each_test { |t|
      h = (@aggr[t.name] ||= {})
      prev_t = h[lang]
      if prev_t
        if prev_t.status == :format_build_failed and t.status == :spec_build_failed
          # "format failed" is the culprit, trust it
          next
        elsif prev_t.status == :spec_build_failed and t.status == :format_build_failed
          # actually it is "format failed", store it
        else
          raise "Already got test information on failing build test \"#{t.name}\" for #{lang}: #{h[lang].inspect}"
        end
      end
      h[lang] = t
    }
  end

  # Count summaries
  def count_ok
    return @count_ok unless @count_ok.nil?
    @count_ok = {}
    @aggr.each_pair { |test, results|
      results.each_pair { |lang, t|
        @count_ok[lang] ||= 0
        @count_ok[lang] += 1 if t.status == :passed or t.status == :skipped
      }
    }

    @count_ok
  end

  def summary
    puts @name
    puts "  #{@aggr.size} tests"
    puts "  per language:"
    count_ok.each_pair { |lang, ok|
      printf "%15s: %d%%\n", lang, 100.0 * ok / @aggr.size
    }
  end

  def langs
    Set.new(count_ok.keys)
  end
end

class ReportGenerator
  attr_reader :translators
  attr_reader :specs

  def initialize(translator_report, test_root)
    @translator_report = translator_report
    @test_root = test_root

    @date = Time.now.utc.to_s
    @translators = Aggregator.new('Expressions')
    @specs = Aggregator.new('KSY compilation')
  end

  def process
    # Process translator test report in compiler directory
    @translators.add_translators(TranslatorXMLParser.new(@translator_report))

    parsers = {
      'csharp' => NUnitXMLParser.new("#{@test_root}/csharp/TestResult.xml"),
      'cpp_stl' => BoostTestParser.new("#{@test_root}/cpp_stl/results.xml"),
      'java' => JUnitXMLParser.new("#{@test_root}/java/junitreports"),
      'javascript' => JUnitXMLParser.new("#{@test_root}/javascript/test-output-javascript.xml"),
      'perl' => JUnitXMLParser.new("#{@test_root}/perl/output.xml"),
      'php' => JUnitXMLParser.new("#{@test_root}/php/results.xml"),
      'python2' => JUnitXMLParser.new("#{@test_root}/python2"),
      'python3' => JUnitXMLParser.new("#{@test_root}/python3"),
      'ruby' => RSpecJSONParser.new("#{@test_root}/ruby/test-output-ruby.json"),
    }

    # Process testing results
    parsers.each_pair { |lang, parser|
      @specs.add(lang, parser)
    }

    # Add build fail results
    bfps = {
      'java' => BuildFailParser.new("#{@test_root}/java"),
    }

    bfps.each_pair { |lang, bfp|
      @specs.add_fails(lang, bfp)
    }

    @translators.summary
    @specs.summary
  end

  def generate(output_file)
    @langs = (@translators.langs + @specs.langs).to_a.sort

    tmpl_header = erb('report_header')
    tmpl_table = erb('report_table')
    tmpl_footer = erb('report_footer')

    File.open(output_file, 'w') { |out|
      out.print tmpl_header.result(binding)

      data = @translators
      out.print tmpl_table.result(binding)

      data = @specs
      # special way to tell table builder to skip first column (with
      # `_expr` pseudo-language)
      @langs[0] = ''
      out.print tmpl_table.result(binding)

      out.print tmpl_footer.result(binding)
    }
  end

  def erb(name)
    bin_dir = File.expand_path(File.dirname(__FILE__))
    ERB.new(File.read("#{bin_dir}/#{name}.html.erb"), nil, nil, '_err')
  end

  def h(s)
    CGI::h(s)
  end
end

translator_report, test_root, output_file = ARGV

rg = ReportGenerator.new(translator_report, test_root)
rg.process
rg.generate(output_file)
